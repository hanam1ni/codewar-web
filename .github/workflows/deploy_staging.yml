name: Deploy to Staging

on:
  push:
    branches:
      - develop
  workflow_dispatch:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ap-southeast-1
  CONTAINER_NAME: codewar-web-staging
  ECR_REPOSITORY: codewar-web-growth
  ECS_CLUSTER: codewar-web-staging-ecs-cluster
  ECS_SERVICE: codewar-web-staging-ecs-service
  ECS_TASK_DEFINITION: codewar-web-staging-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Configure Github ENV variables
        uses: FranzDiebold/github-env-vars-action@v2.1.0

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id:  ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: $CI_REF_NAME_SLUG-$CI_SHA_SHORT
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@de0132cf8cdedb79975c6d42b77eb7ea193cf28e
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
